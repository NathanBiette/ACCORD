----------------------------
Listes utiles
----------------------------

#Liste des imput devices : 
>ffmpeg -list_devices true -f dshow -i dummy

#Liste des options vidéos disponibles :
>ffmpeg -f dshow -list_options true -i video="USB2.0 HD UVC WebCam"

-------------------------------
Syntaxe et fonctions
-------------------------------
Pour apprendre à utiliser x264 dans ffmpeg LIRE ABSOLUMENT :

http://trac.ffmpeg.org/wiki/Encode/H.264

-vcodec est l'encodage vidéo ici placé avant -i il précise quel encodage sera lu dans le imput file et donc pour un stream vidéo en entrée, comment les images de la webcam doivent être encodées en amont. 
mjpeg fonctionne mieux que ne rien préciser car la compression est meilleure.

-acodec est l'encodage audio

Remarque : ne rien préciser semble mettre l'encodage en brut et overload le buffer rapidement à trop haute résolution.

-i : c'est l'input (fichier ou device)
-r : c'est le framerate (frame per seconds)
-s : c'est la résolution
-f : c'est le format ou container à utiliser pour stocker les données encodées. On peut le préciser explicitement comme mpegts par exemple ou implicitement dans l’extension de nom comme avec out.mp4 ou out.avi .
-y : on overwrite les fichiers existants du même nom
-c:v : c'est l'encodeur à utiliser pour encoder la vidéo. ex: -c:v libx264 
-b:v : c'est le bitrate de la vidéo que l'on spécifie. 
Attention, spécifier un certain bitrate n'est pas la meilleure option car elle contraint de se tenir à une certaine valeur de bitrate alors que l'on pourrait avoir un bitrate variable pour une qualité équivalente en cas de bitrate dynamiquement variable.


# les options de l'encodeur x264 sont les suivantes:

-profile:v baseline (ou main ou high ou autre...) 
Précise les contraintes d'encodage vidéo qui définissent quels systèmes pourront lire le flux vidéo.
Le profile baseline est le profile de base qui assure que le flux puisse être lu sur tout support mobile.
voir : https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC#Profiles

-preset : ultrafast (ou fast ou medium ou slow ou veryslow) 
Définit la rapidité de l'encodage . Un encodage rapide donne une mauvaise compression donc une taille de la vidéo plus élevée et une qualité de vidéo moindre.

-tune zerolatency (ou animation ou film ou autre...) 
Donne un output optimisé en fonction de l'imput de base (avec zerolatency, on réduit grandement la latence de l'encodage)

-x264opts
Permet de réécrire des options par défauts de l'encodeur x264 comme crf ou keyint=123:min-keyint=20 par exemple.

-x264opts crf=23 (ou une valeur entre 0 et 51 pour un sous-échantillonnage 8 bits)
Donne le Constant Rate Factor de l'encodage. La valeur par défaut est 23. La meilleur valeur est 0 et la pire 51 en terme de qualité, respectivement la taille de fichier la plus élevé et la moins élevée.

-x264opts keyint=123:min-keyint=20

keyint= <entier>
Permet de définir la taille des groupes d'images, ie, la distance maximale entre deux I-frame.

min-keyint <integer> 
Permet de définir la distance minimum entre deux I-frame.

A LIRE POUR PLUS DE PRECISION : https://sites.google.com/site/linuxencoding/x264-ffmpeg-mapping

Les options : no-mbtree, sliced-threads et sync-lookahead=0 sont déjà présente dans le preset -tune zerolatency

-threads :


#Pour utiliser une fonction : 
-fonction argument=valeur argument=valeur ...etc -fonction_suivante

#Structure générale des lignes de commandes :
>ffmpeg [global options] [input options] -i input [output options] output 

Remarque: On peut additionner les outputs pour streamer et enregistrer pulusieurs sources en meme temps.
>ffmpeg [global options] [input options] -i input [output_1 options] output_1 [output_2 options] output_2... [output_n options] output_n

----------------------------
Ecriture dans un fichier
----------------------------

#Flux video seulement: 
>ffmpeg -y -f dshow -s 1280x720 -r 30 -vcodec mjpeg -i video="USB2.0 HD UVC WebCam" out.mp4

#Flux audio et video : 
>ffmpeg -y -f dshow -vcodec mjpeg -i video="USB2.0 HD UVC WebCam":audio="Microphone (Realtek High Definition Audio)" out4.mp4

#Flux audio et video encodé en h264 et aac :
>ffmpeg -y -f dshow -s 1280x720 -r 30 -c:v mjpeg -i video="USB2.0 HD UVC WebCam":audio="Microphone (Realtek High Definition Audio)" -c:v libx264 -c:a aac out5.mp4

----------------------------
Encoding utilisant la puce nvidia dédiée
----------------------------

#Infos générales:
Le support de nvenc et nvdec (respectivement encoder et decoder nvidia) et natif à ffmpeg. On précise simplement l'encodeur h264_nvenc à la place de libx264.
Cependant, pour formuler des commandes très précises, il faut installer le SDK NVDIA et recompiler ffmpeg avec les bons paramétres.

#Stream audio et video encodé en h264 avec la puce d'encoding nvidia (dans la carte graphique)
>ffmpeg [...] -c:v h264_nvenc out5.mp4

-----------------------------
Streaming internet
-----------------------------

#Stream de la vidéo en rtp:
>ffmpeg [...] -f rtp rtp://224.10.20.30:30000

#Stream de la vidéo en mpegts sur udp:
ffmpeg [...] -f mpegts udp://224.10.20.30:30000

#TOTAL:
en rtp rtp (on ne spécifie pas de container, on envoie juste le tout avec le protocol rtp qui utilise lui-même le protocol udp) :
>ffmpeg -y -f dshow -s 1280x720 -r 30 -i video="Logitech HD Webcam C270" -c:v libx264 -vf format=yuv420p -profile:v baseline -level 3.0 -tune zerolatency -preset ultrafast -x264opts crf=15 -fflags nobuffer -x264opts keyint=100:min-keyint=20 -f rtp rtp://224.10.20.30:30000
en mpegts udp (on spécifie le container mpegts qui est ensuite envoyé à l’aide du protocole udp) :
>ffmpeg -y -f dshow -s 1280x720 -r 30 -i video="Logitech HD Webcam C270" -c:v libx264 -vf format=yuv420p -profile:v baseline -level 3.0 -tune zerolatency -preset ultrafast -x264opts crf=15 -fflags nobuffer -x264opts keyint=100:min-keyint=20 -f mpegts udp://224.10.20.30:30000

------------------------------
Lecture de la vidéo
------------------------------
pour réduire la latence du coté du lecteur :
-sync ext (demande à rester en temps réel)
-probesize 32 (nombre de frames à capturer avant pour déterminer les specs de la vidéo)

#Lire stream vidéo en protocole rtp ou udp:
>ffplay -protocol_whitelist file,udp,rtp -i description_sdp.sdp
>ffplay -probesize 32 -protocol_whitelist file,udp,rtp -i description_sdp.sdp

>ffplay -sync ext -probesize 32 -i udp://224.10.20.30:30000


*avec le fichier sdp créé en copiant les détails affichés après SDP par la console après appel de la fonction ffmpeg pour le streaming, dans un fichier texte et enregirstré au format .sdp . 
Le chemin d'accés du fichier doit être spécifié si il n'est pas dans le bin de ffmpeg

exemple : 
v=0
o=- 0 0 IN IP4 127.0.0.1
s=No Name
c=IN IP4 224.10.20.30
t=0 0
a=tool:libavformat 57.59.100
m=video 30000 RTP/AVP 96
a=rtpmap:96 H264/90000
a=fmtp:96 packetization-mode=1

#Lire le stream avec vlc : 
Simplement ouvrir le fichier sdp avec vlc et prier pour que ca fonctionne (ca peut prendre du temps)
ou bien ouvrir une adresse url de type <protocole>://@<adresse>:<port> rtp://@224.10.20.30:30000 ou udp://@224.10.20.30:30000 

------------------------------
crop en 720p
------------------------------

#Ecriture fichier, vidéo seule et crop en 480p
>ffmpeg -y -f dshow -s 1280x720 -r 30 -vcodec mjpeg -i video="USB2.0 HD UVC WebCam" -filter:v "crop=720:480:0:0" out.mp4

#Streaming video seule et crop 480p
>ffmpeg -y -f dshow -s 1280x720 -r 30 -c:v mjpeg -i video="USB2.0 HD UVC WebCam" -filter:v "crop=720:480:0:0" -c:v libx264 -tune zerolatency -fflags nobuffer -f rtp rtp://224.10.20.30:30000
>ffplay -protocol_whitelist file,udp,rtp -i descriptioncrop.sdp
Avec le fichier le meme fichier sdp que l'exemple précédent.


#Extraire un cadre précis de la vidéo
>ffmpeg -i input.mp4 -filter:v “crop=largeur_du_rectangle_de_sortie:longueur_du_rectangle_de_sortie:abscisse_coin_gauche:ordonnée_coin_gauche” out.mp4

>ffmpeg -i input.mp4 -filter:v “crop=720:480:0:0” out.mp4

>Autres possibilités :+fmpeg -i in.mp4 -filter:v "crop=in_w/2:in_h/2:in_w/2:in_h/2" -c:a copy out.mp4
+ffmpeg -i in.mp4 -filter:v "crop=in_w:in_h-40" -c:a copy out.mp4 pour retirer 20 pixels du haut et du bas (l’absence de spécification de coordonnée du coin fera un recentrage)
  (Rq: acces à tous les filtres disponibles: ffmpeg -filters)

------------------------------
tests
------------------------------
#Mélange de crop streamé et d'enregistrement au format complet de la vidéo:
>ffmpeg -y -f dshow -s 1280x720 -r 30 -c:v mjpeg -i video="USB2.0 HD UVC WebCam" -filter:v "crop=720:480:0:0" -c:v libx264 -tune zerolatency -preset fast -fflags nobuffer -f rtp rtp://224.10.20.30:30000 -c:v libx264 out5.mp4
--> Ca fonctionne mais le problème de time base reste inchangé (vidéo parait accélérée à la lecture)



Problèmes à régler:
-Time base changeante --> accelère la vidéo , à régler.
-Streaming lent, latence de 2 à trois secondes.
